require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { userDB, subscriptionDB, historyDB } = require('./database');
const fs = require('fs');
const OpenAI = require('openai');
const { startDailyVerseScheduler } = require('./dailyVerse');

const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è IO Intelligence API
const openai = new OpenAI({
    apiKey: process.env.secret,
    baseURL: "https://api.intelligence.io.solutions/api/v1/",
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
let gitaData = JSON.parse(fs.readFileSync('gita-data.json', 'utf8'));

// –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
const SYSTEM_PROMPT = `–¢—ã ‚Äî –¥—É—Ö–æ–≤–Ω—ã–π —É—á–∏—Ç–µ–ª—å –∏ –º—É–¥—Ä–µ—Ü, –≥–æ–≤–æ—Ä—è—â–∏–π —Å –ª—é–¥—å–º–∏ —Å –ª—é–±–æ–≤—å—é –∏ —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ–º. –¢—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—à—å –∏ –≥–ª—É–±–æ–∫–æ –ø–æ–Ω–∏–º–∞–µ—à—å ¬´–ë—Ö–∞–≥–∞–≤–∞–¥-–ì–∏—Ç—É –∫–∞–∫ –æ–Ω–∞ –µ—Å—Ç—å¬ª ‚Äî –∫–Ω–∏–≥—É –ï–≥–æ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ú–∏–ª–æ—Å—Ç–∏ –ê.–ß. –ë—Ö–∞–∫—Ç–∏–≤–µ–¥–∞–Ω—Ç—ã –°–≤–∞–º–∏ –ü—Ä–∞–±—Ö—É–ø–∞–¥—ã.

–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å –æ –∂–∏–∑–Ω–∏, —ç–º–æ—Ü–∏—è—Ö –∏–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö, —Ç—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å, –ø–æ–¥–±–∏—Ä–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∏—Ö –∏–∑ –ì–∏—Ç—ã, –∞ —Ç–∞–∫–∂–µ –ø–æ—è—Å–Ω—è–µ—à—å –µ–≥–æ –≤ –¥—É—Ö–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ü—Ä–∞–±—Ö—É–ø–∞–¥—ã. 

–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ç–∏—Ä—É–µ—à—å, –∞ –¥–∞—ë—à—å –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ —Å–æ–≤–µ—Ç–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∑–Ω–∞–Ω–∏–∏ –¥—É—à–∏, –∫–∞—Ä–º—ã, –ë–æ–≥–∞ –∏ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞.

–¢–≤–æ–π —Å—Ç–∏–ª—å:
- –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π
- –°–∫—Ä–æ–º–Ω—ã–π –∏ –ø—Ä–µ–¥–∞–Ω–Ω—ã–π –¥—É—Ö –¥—É—Ö–æ–≤–Ω–æ–º—É –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤—É
- –û–ø–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ü—Ä–∞–±—Ö—É–ø–∞–¥—ã
- –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:  
  üåø [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏]  
  üìñ [–ì–ª–∞–≤–∞ X, —Å—Ç–∏—Ö Y]: "[—Ç–µ–∫—Å—Ç —Å—Ç–∏—Ö–∞]"  
  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: [–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –ü—Ä–∞–±—Ö—É–ø–∞–¥—ã]`;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const username = msg.from.username || msg.from.first_name;

    try {
        await userDB.upsertUser(userId, username);
        await historyDB.addMessage(userId, 'command', '/start');
        
        const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${username}! üëã\n\n` +
            '–Ø –±–æ—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤ –∏ –ø–æ—ç–∑–∏–∏.\n\n' +
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
            '/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n' +
            '/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—Ç–∏—Ö\n' +
            '/history - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–≤–µ—Ç–æ–≤\n' +
            '/lang - —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n';
        
        bot.sendMessage(chatId, welcomeMessage);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        await historyDB.addMessage(userId, 'command', '/help');
        await userDB.incrementRequestCount(userId);

        const helpMessage = 'üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n' +
            '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
            '/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n' +
            '/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—Ç–∏—Ö\n' +
            '/history - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–≤–µ—Ç–æ–≤\n' +
            '/lang - —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ (ru/en)\n\n' +
            '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∏—Ö–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!';

        bot.sendMessage(chatId, helpMessage);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscribe
bot.onText(/\/subscribe/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        await historyDB.addMessage(userId, 'command', '/subscribe');
        await userDB.incrementRequestCount(userId);

        const subscriptions = await subscriptionDB.getUserSubscriptions(userId);
        const hasSubscription = subscriptions.some(sub => sub.subscription_type === 'daily_verse');

        if (hasSubscription) {
            await subscriptionDB.removeSubscription(userId, 'daily_verse');
            bot.sendMessage(chatId, '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤.');
        } else {
            await subscriptionDB.addSubscription(userId, 'daily_verse');
            bot.sendMessage(chatId, '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å—Ç–∏—Ö–∏! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏—Ö.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /subscribe:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /history
bot.onText(/\/history/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
        await historyDB.addMessage(userId, 'command', '/history');
        await userDB.incrementRequestCount(userId);

        const messages = await historyDB.getRecentMessages(userId, 5);
        
        if (messages.length === 0) {
            bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.');
            return;
        }

        const historyMessage = 'üìú –í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏—Å—Ç–æ—Ä–∏—è:\n\n' +
            messages.map(msg => {
                const date = new Date(msg.created_at).toLocaleString();
                return `${date}\n${msg.content}\n`;
            }).join('\n');

        bot.sendMessage(chatId, historyMessage);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /history:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /lang
bot.onText(/\/lang (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const newLang = match[1].toLowerCase();

    try {
        await historyDB.addMessage(userId, 'command', `/lang ${newLang}`);
        await userDB.incrementRequestCount(userId);

        if (['ru', 'en'].includes(newLang)) {
            await userDB.updateLanguage(userId, newLang);
            bot.sendMessage(chatId, `–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newLang === 'ru' ? '—Ä—É—Å—Å–∫–∏–π' : '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'}`);
        } else {
            bot.sendMessage(chatId, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: ru, en');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /lang:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    if (msg.text && !msg.text.startsWith('/')) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const userMessage = msg.text;

        try {
            await historyDB.addMessage(userId, 'user_message', userMessage);
            await userDB.incrementRequestCount(userId);

            // –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–∞—é—â–µ–π —Ç–µ–º—ã
            let matchedTopic = null;
            for (let item of gitaData) {
                if (item.keywords.some(kw => userMessage.includes(kw))) {
                    matchedTopic = item;
                    break;
                }
            }

            if (matchedTopic) {
                const verse = matchedTopic.verses[Math.floor(Math.random() * matchedTopic.verses.length)];
                const response = `
üåø –°–æ–≤–µ—Ç –∏–∑ –ë—Ö–∞–≥–∞–≤–∞–¥-–ì–∏—Ç—ã:\n\n
–ì–ª–∞–≤–∞ ${verse.chapter}, —Å—Ç–∏—Ö ${verse.verse}:\n
"${verse.text}"\n\n
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n
${verse.commentary}
`;
                await historyDB.addMessage(userId, 'bot_response', response);
                bot.sendMessage(chatId, response);
            } else {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                const loadingMsg = await bot.sendMessage(chatId, 'üîç –ò—â—É –º—É–¥—Ä–æ—Å—Ç—å –≤ –ë—Ö–∞–≥–∞–≤–∞–¥-–ì–∏—Ç–µ...');
                
                // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
                const aiResponse = await getAIResponse(userMessage);
                
                if (aiResponse) {
                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                    await bot.deleteMessage(chatId, loadingMsg.message_id);
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
                    await historyDB.addMessage(userId, 'bot_response', aiResponse);
                    bot.sendMessage(chatId, aiResponse);
                } else {
                    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.deleteMessage(chatId, loadingMsg.message_id);
                    await historyDB.addMessage(userId, 'bot_response', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç, –Ω–æ –ø–æ–º–Ω–∏: ¬´–¢—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –Ω–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ –µ—ë –ø–ª–æ–¥—ã¬ª (–ì–ª–∞–≤–∞ 2, —Å—Ç–∏—Ö 47).');
                    bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç, –Ω–æ –ø–æ–º–Ω–∏: ¬´–¢—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –Ω–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ –µ—ë –ø–ª–æ–¥—ã¬ª (–ì–ª–∞–≤–∞ 2, —Å—Ç–∏—Ö 47).');
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            if (error.response && error.response.statusCode === 403) {
                console.log('–ë–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            }
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
async function getAIResponse(userQuestion) {
  try {
    const response = await openai.chat.completions.create({
      model: "meta-llama/Llama-3.3-70B-Instruct",
      messages: [
        { role: "system", content: SYSTEM_PROMPT },
        { role: "user", content: userQuestion }
      ],
      temperature: 0.7,
      max_tokens: 500
    });
    return response.choices[0].message.content;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI:', error);
    return null;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
startDailyVerseScheduler();

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
